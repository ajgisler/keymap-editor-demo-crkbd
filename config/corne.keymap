#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };

    ctrl {
      key-positions = <26 27>;
      bindings = <&kp LCTRL>;
    };

    cmd {
      key-positions = <37 38>;
      bindings = <&kp LCMD>;
    };

    alt {
      key-positions = <39 40>;
      bindings = <&kp LEFT_ALT>;
    };

    shift {
      key-positions = <8 9>;
      bindings = <&kp LSHIFT>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };

    copy {
      bindings = <&kp K_COPY>;
      key-positions = <3 4>;
    };

    cut {
      bindings = <&kp K_CUT>;
      key-positions = <16 15>;
    };

    paste {
      bindings = <&kp K_PASTE>;
      key-positions = <28 27>;
    };
  };

  macros {
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };
    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };
    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
    jc: jc {
      compatible = "zmk,behavior-tap-dance";
      label = "JC";
      #binding-cells = <0>;
      bindings = <&kp J>, <&kp K_COPY>;
    };
    mc: mc {
      compatible = "zmk,behavior-tap-dance";
      label = "MC";
      #binding-cells = <0>;
      bindings = <&kp M>, <&kp K_CUT>;
    };
    kpa: kpa {
      compatible = "zmk,behavior-tap-dance";
      label = "KPA";
      #binding-cells = <0>;
      bindings = <&kp K>, <&kp K_PASTE>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <2 1>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB    &kp Q  &kp W  &kp F         &kp P          &kp B                    &jc        &kp L     &kp U         &kp Y    &kp SEMI  &kp F2
        &kp TAB    &kp A  &kp R  &kp S         &kp T          &kp G                    &mc        &kp N     &kp E         &kp I    &kp O     &kp LS(DQT)
        &kp LSHFT  &kp Z  &kp X  &kp C         &kp D          &kp V                    &kpa       &kp H     &kp COMMA     &kp DOT  &kp FSLH  &kp ESC
                                 &lt 2 DELETE  &kp BACKSPACE  &hml LEFT_SHIFT SPACE    &lt 5 RET  &kp BSPC  &lt 1 DELETE
      >;
    };

    SYM {
      bindings = <
        &trans   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &trans
        &kp DEL  &kp ESC   &kp F2  &kp F7    &kp F8    &kp F9       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
        &trans   &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                   &trans    &trans    &to 0        &trans     &trans     &trans
      >;
    };

    NUM {
      bindings = <
        &kp SPACE         &kp N1             &kp N2          &kp N3           &kp N4                &kp N5                   &kp EQUAL  &kp N7        &kp N8  &kp N9        &kp N0        &kp SPACE
        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PLUS   &kp NUMBER_4  &kp N5  &kp NUMBER_6  &kp ASTERISK  &kp PERCENT
        &kp GRAVE         &kp PIPE           &kp AMPERSAND   &kp LESS_THAN    &kp GREATER_THAN      &kp DOUBLE_QUOTES        &kp COMMA  &kp N1        &kp N2  &kp N3        &kp SLASH     &kp CARET
                                                             &kp SPACE        &kp SPACE             &to 0                    &kp SPACE  &kp PERIOD    &kp N0
      >;

      sensor-bindings = <&volknob>;
    };

    both {
      bindings = <
        &rgb_ug RGB_COLOR_HSB(0,80,60)  &rgb_ug RGB_COLOR_HSB(20,80,60)  &rgb_ug RGB_COLOR_HSB(40,80,60)  &rgb_ug RGB_COLOR_HSB(60,80,60)  &rgb_ug RGB_COLOR_HSB(80,80,60)  &rgb_ug RGB_COLOR_HSB(100,80,60)    &rgb_ug RGB_COLOR_HSB(120,80,60)  &rgb_ug RGB_COLOR_HSB(140,80,60)  &rgb_ug RGB_COLOR_HSB(160,80,60)  &rgb_ug RGB_COLOR_HSB(180,80,60)  &rgb_ug RGB_COLOR_HSB(200,80,60)  &rgb_ug RGB_COLOR_HSB(220,80,60)
        &rgb_ug RGB_COLOR_HSB(0,60,40)  &rgb_ug RGB_COLOR_HSB(20,60,40)  &rgb_ug RGB_COLOR_HSB(40,60,40)  &rgb_ug RGB_COLOR_HSB(60,60,40)  &rgb_ug RGB_COLOR_HSB(80,60,40)  &rgb_ug RGB_COLOR_HSB(100,60,40)    &rgb_ug RGB_COLOR_HSB(120,60,40)  &rgb_ug RGB_COLOR_HSB(140,60,40)  &rgb_ug RGB_COLOR_HSB(160,60,40)  &rgb_ug RGB_COLOR_HSB(180,60,40)  &rgb_ug RGB_COLOR_HSB(200,60,40)  &rgb_ug RGB_COLOR_HSB(220,60,40)
        &rgb_ug RGB_COLOR_HSB(0,80,30)  &rgb_ug RGB_COLOR_HSB(20,80,30)  &rgb_ug RGB_COLOR_HSB(40,80,30)  &rgb_ug RGB_COLOR_HSB(60,80,30)  &rgb_ug RGB_COLOR_HSB(80,80,30)  &rgb_ug RGB_COLOR_HSB(100,80,30)    &rgb_ug RGB_COLOR_HSB(120,80,30)  &rgb_ug RGB_COLOR_HSB(140,80,30)  &rgb_ug RGB_COLOR_HSB(160,80,30)  &rgb_ug RGB_COLOR_HSB(180,80,30)  &rgb_ug RGB_COLOR_HSB(200,80,30)  &rgb_ug RGB_COLOR_HSB(220,80,30)
                                                                                                          &trans                           &trans                           &trans                              &trans                            &trans                            &trans
      >;
    };

    autoshift {
      bindings = <
        &trans  &as Q  &as W  &as E   &as R   &as T     &as Y   &as U   &as I   &as O   &as P   &trans
        &trans  &as A  &as S  &as D   &as F   &as G     &as H   &as J   &as K   &as L   &trans  &trans
        &trans  &as Z  &as X  &as C   &as V   &as B     &as N   &as M   &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    NAV {
      bindings = <
        &trans      &trans        &trans        &trans        &trans  &trans    &trans  &trans          &kp UP_ARROW  &trans     &trans  &trans
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &trans  &trans
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans    &trans  &trans          &trans        &trans     &trans  &trans
                                                &to 2         &trans  &to 0     &trans  &trans          &to 1
      >;
    };
  };
};
