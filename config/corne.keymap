#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };

    exclamation {
      key-positions = <8 9>;
      bindings = <&kp EXCLAMATION>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };

    copy {
      bindings = <&kp K_COPY>;
      key-positions = <4 3>;
    };

    cut {
      bindings = <&kp K_CUT>;
      key-positions = <16 15>;
    };

    paste {
      bindings = <&kp K_PASTE>;
      key-positions = <28 27>;
    };
  };

  macros {
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };
    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      flavor = "tap-preferred";
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      flavor = "tap-preferred";
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };
    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
    jc: jc {
      compatible = "zmk,behavior-tap-dance";
      label = "JC";
      #binding-cells = <0>;
      bindings = <&kp J>, <&kp K_COPY>;
    };
    mc: mc {
      compatible = "zmk,behavior-tap-dance";
      label = "MC";
      #binding-cells = <0>;
      bindings = <&kp M>, <&kp K_CUT>;
    };
    kpa: kpa {
      compatible = "zmk,behavior-tap-dance";
      label = "KPA";
      #binding-cells = <0>;
      bindings = <&kp K>, <&kp K_PASTE>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <1 4>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      label = "BASE";
      bindings = <
        &kp TAB       &kp Q        &kp W            &kp F              &kp P          &kp B          &kp J    &kp L         &kp U               &kp Y        &kp SEMI     &kp MINUS
        &kp CAPSLOCK  &hml LGUI A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &hml LCTRL T   &kp G          &kp M    &hmr RCTRL N  &hmr RIGHT_SHIFT E  &hmr RALT I  &hmr RGUI O  &kp SINGLE_QUOTE
        &kp LSHFT     &kp Z        &kp X            &kp C              &kp D          &kp V          &kp K    &kp H         &kp COMMA           &kp DOT      &kp FSLH     &kp ESC
                                                    &mo 1              &kp BACKSPACE  &lt 2 SPACE    &kp RET  &kp DELETE    &to 4
      >;
    };

    SYM {
      label = "SYM";
      bindings = <
        &trans   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp MINUS      &kp SLASH        &kp AMPS              &kp PIPE               &kp PERCENT        &kp CARET        &trans
        &kp DEL  &kp ESC   &kp F2  &kp F7    &kp F8    &kp F9         &kp EQUAL        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE     &kp RIGHT_BRACE  &kp GRAVE
        &trans   &trans    &kp F1  &kp F2    &kp F6    &trans         &kp EXCLAMATION  &kp PLUS              &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp ASTERISK     &kp TILDE
                                   &trans    &trans    &lt 0 SPACE    &trans           &trans                &trans
      >;
    };

    NUM {
      label = "NUM";
      bindings = <
        &kp SPACE         &kp N1             &kp N2          &kp N3                       &kp MINUS             &kp N5                   &kp EQUAL  &kp N7        &kp N8               &kp N9        &kp N0        &kp SPACE
        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &hml LEFT_SHIFT RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PLUS   &kp NUMBER_4  &hmr RIGHT_SHIFT N5  &kp NUMBER_6  &kp ASTERISK  &kp PERCENT
        &kp GRAVE         &kp PIPE           &kp AMPERSAND   &kp LESS_THAN                &kp GREATER_THAN      &none                    &kp MINUS  &kp N1        &kp N2               &kp N3        &kp SLASH     &kp CARET
                                                             &trans                       &trans                &to 0                    &trans     &kp PERIOD    &kp N0
      >;
    };

    autoshift {
      bindings = <
        &trans  &as Q  &as W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp I      &kp L       &kp SEMICOLON  &trans
        &trans  &kp A  &kp R  &kp S   &kp F   &kp G     &kp M   &kp N   &kp E      &kp I       &kp O          &trans
        &trans  &as Z  &as X  &as C   &kp D   &kp V     &kp K   &kp H   &kp COMMA  &kp PERIOD  &kp SLASH      &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    NAV {
      label = "NAV";
      bindings = <
        &trans   &trans   &trans    &kp UP_ARROW  &trans     &trans            &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &kp DEL  &kp DEL  &kp LEFT  &kp DOWN      &kp RIGHT  &kp LEFT_SHIFT    &trans          &none         &none         &none         &trans        &out OUT_TOG
        &none    &none    &trans    &trans        &kp LCMD   &trans            &kp LCTRL       &trans        &trans        &trans        &trans        &trans
                                    &trans        &trans     &to 0             &kp LEFT_SHIFT  &to 1         &to 0
      >;
    };
  };
};
